---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

# BlinkPay Website Refresh: Component Pre-build PRD

## Project Overview
This document outlines the plan for pre-building HTML/CSS components in a local development environment before importing them into Webflow. This approach enables version control, code reuse, and more efficient development of complex components.

## Goals
- Create a structured component library that can be easily imported into Webflow
- Establish consistent coding standards across all components
- Maximize development efficiency by building components once and reusing them
- Ensure responsive design and cross-browser compatibility

## Development Environment

### File Structure
```
blinkpay-webflow-components/
├── components/           # Individual reusable components
│   ├── navigation/
│   ├── hero/
│   ├── modern-hero/      # Modern hero component with animation
│   ├── features/
│   ├── testimonials/
│   ├── pricing/
│   ├── contact/
│   └── footer/
├── styles/               # Global styles and variables
│   ├── global.css       
│   ├── variables.css     # Colors, spacing, typography variables
│   └── utilities.css     # Utility classes
├── assets/               # Images, icons, and other assets
│   ├── images/
│   ├── icons/
│   └── fonts/
├── pages/                # Full page assemblies for testing
│   ├── index.html        # Homepage
│   └── other-pages/
├── exported/             # Export-ready components for Webflow
├── scripts/              # Build scripts and utilities
│   └── export.js         # Script to prepare components for Webflow
├── blink-animations.js   # Animation utilities library (root level)
├── package.json          # Project dependencies and scripts
├── README.md             # Project documentation
└── docs/                 # Documentation
    ├── PRD.md            # Product Requirements Document
    └── component-docs/   # Documentation for specific components
```

### Development Workflow
1. **Component Design**: Wireframe and design each component
2. **Component Development**: Build HTML/CSS for each component individually
3. **Component Testing**: Test each component for functionality, responsiveness
4. **Component Export**: Prepare components for Webflow import
5. **Webflow Import**: Import components into Webflow
6. **Integration Testing**: Test components in the Webflow environment

## Coding Standards

### HTML Standards
- Use semantic HTML5 elements where appropriate (`header`, `nav`, `main`, `section`, `article`, `footer`)
- Keep HTML structure clean and organized with proper indentation
- Use appropriate ARIA attributes for accessibility
- Maintain consistent naming conventions for IDs and classes
- Limit nesting to 3-4 levels maximum

### CSS Standards
- Follow BEM (Block Element Modifier) naming convention:
  - `.block` - Component name (e.g., `.card`)
  - `.block__element` - Child of component (e.g., `.card__title`)
  - `.block--modifier` - Variation of component (e.g., `.card--featured`)
- Use CSS variables for colors, spacing, and typography
- Write mobile-first responsive CSS
- Avoid !important declarations
- Minimize use of absolute positioning
- Group related CSS properties together

### Animation Standards
- **GSAP**: Use GSAP for all complex animations and transitions
- **BlinkAnimations.js**: Utilize our custom animation library for consistent effects
- Avoid mixing CSS transitions with GSAP animations to prevent conflicts
- Prefer animating transform and opacity properties for better performance
- Use staggered animations for sequenced element reveals
- Keep animations subtle and purposeful - avoid excessive motion

### File Naming Conventions
- Use kebab-case for all files and folders
- Component folders should contain:
  - `index.html` - Component markup
  - `styles.css` - Component-specific styles
  - `README.md` - Component documentation

## Animation Implementation Workflow

### Animation Technology Stack
- **GSAP**: Primary animation library for complex animations
- **BlinkAnimations.js**: Custom animation utility library that wraps GSAP functionality
- **CDN Delivery**: All animation libraries served via jsDelivr CDN

### Animation Development Process
1. **Build Animations in BlinkAnimations.js**:
   - Create modular animation functions within `blink-animations.js` (located at root level)
   - Follow the pattern: `BlinkAnimations.init[ComponentName]`
   - Each component animation should be self-contained
   - Use GSAP timelines for sequenced animations
   - Current implementations include:
     - `initHero` - For modern-hero component animations
     - `initButtonHovers` - For button hover animations

2. **Component Integration**:
   - Components should reference the BlinkAnimations library
   - Initialize animations using DOM selectors
   - Example: `BlinkAnimations.initHero('.modern-hero')`

3. **Animation Best Practices**:
   - Keep initial state management within the animation function
   - Use consistent easing and timing functions
   - Avoid mixing CSS transitions with GSAP animations to prevent conflicts
   - Document any animation dependencies

### CDN Workflow
1. **Host Code on GitHub**:
   - Store `blink-animations.js` in the repository root
   - Maintain versioning via git

2. **Serve via jsDelivr**:
   - Use jsDelivr CDN to serve the animation library
   - Format: `https://cdn.jsdelivr.net/gh/[username]/[repo]/[file]`
   - Example: `https://cdn.jsdelivr.net/gh/blinkpay/blinkpay-webflow-components/blink-animations.js`

3. **Cache Purging Process**:
   - After updates to animation code, purge the jsDelivr cache
   - Use the purge tool: [jsDelivr Purge Tool](mdc:https:/www.jsdelivr.com/tools/purge)
   - This ensures users get the latest version immediately
   - Without purging, cache updates could take up to 7 days

4. **Version Control**:
   - For critical releases, use versioned URLs instead of @latest
   - Example: `https://cdn.jsdelivr.net/gh/blinkpay/blinkpay-webflow-components@v1.2.0/blink-animations.js`
   - Purge specific version URLs when needed

### Animation Usage Guidelines
1. **Initialization**:
   - Always initialize animations after DOM content is loaded
   - Example:
     ```javascript
     document.addEventListener('DOMContentLoaded', function() {
       BlinkAnimations.initHero('.modern-hero');
     });
     ```

2. **Avoiding Animation Issues**:
   - When animations cause visibility problems, consider:
     - Temporarily disabling animations during development
     - Using debug styles to force visibility
     - Setting initial states to visible and animating properties other than opacity

3. **Performance Considerations**:
   - Animate transform and opacity properties when possible
   - Use staggered animations for multiple elements
   - Be mindful of animation performance on mobile devices

## Component Development Process

1. **Initial Setup**:
   - Create component folder in `/components/[component-name]/`
   - Add `index.html` and `styles.css`
   - Link to global stylesheets

2. **Development**:
   - Build component HTML structure
   - Apply BEM-based CSS styling
   - Add animations via BlinkAnimations library if needed
   - Test responsiveness across breakpoints
   - Document component usage

3. **Validation**:
   - Validate HTML with W3C validator
   - Ensure CSS follows project standards
   - Test in multiple browsers
   - Check accessibility with tools like Lighthouse

## Component Export & Webflow Import Process

### Export Process
1. **Preparation**:
   - Ensure all assets are optimized (images compressed, SVGs optimized)
   - Validate component HTML and CSS
   - Ensure all dependencies are included

2. **Export Script**:
   - Run export script (`npm run export [component-name]`)
   - Script will:
     - Inline necessary CSS
     - Optimize HTML
     - Copy to `/exported/[component-name]/`
     - Generate component documentation

### Webflow Import Process
1. **Create Custom Code Block** in Webflow
2. **Paste HTML** from exported component
3. **Import Assets** into Webflow asset manager
4. **Update Asset Paths** in the imported HTML to use Webflow CDN
5. **Add Animation Libraries** to Webflow project settings if needed:
   - GSAP (from CDN): `https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js`
   - BlinkAnimations (from jsDelivr): `https://cdn.jsdelivr.net/gh/blinkpay/blinkpay-webflow-components/blink-animations.js`
6. **Test** the component in Webflow environment
7. **Document** any adjustments needed for Webflow compatibility

## Testing Methodology
- **Unit Testing**: Test components individually in local environment
- **Integration Testing**: Test components working together
- **Responsive Testing**: Test across multiple device sizes
- **Cross-browser Testing**: Test in Chrome, Firefox, Safari, Edge
- **Performance Testing**: Optimize load times and animations

## Webflow Compatibility Guidelines
- **Avoid**: JavaScript that might conflict with Webflow's built-in scripts
- **Use**: Simple class-based animations where possible
- **Maintain**: Clear separation between structure and styling
- **Consider**: Webflow's built-in components and interactions before custom code
- **Document**: Any limitations or special considerations for each component

## Implementation Timeline
1. **Week 1**: Setup project structure and develop core components
2. **Week 2**: Develop remaining components and testing
3. **Week 3**: Export process and Webflow integration
4. **Week 4**: Testing, refinement, and documentation

## Success Metrics
- All components successfully imported to Webflow
- Consistent styling across all components
- Responsive design functions on all target devices
- Page load time under 3 seconds
- Passes accessibility guidelines

## Rules for Maintaining Quality and Consistency

1. **Version Control**:
   - Commit early and often
   - Use descriptive commit messages
   - Create a new branch for each component

2. **Code Reviews**:
   - All components must be reviewed before export
   - Use a checklist for code reviews to ensure standards

3. **Documentation**:
   - All components must include usage documentation
   - Document any Webflow-specific considerations

4. **Testing**:
   - Test all components in isolation before integration
   - Test on multiple device sizes
   - Validate HTML and CSS

5. **Maintenance**:
   - Update component documentation when changes are made
   - Keep exported components in sync with source
   - Purge CDN cache after animation updates to ensure latest version is delivered

## Appendix

### Webflow Import Checklist
- [ ] HTML structure is clean and valid
- [ ] CSS classes follow BEM convention
- [ ] Assets are optimized and paths updated
- [ ] Component is responsive
- [ ] GSAP and BlinkAnimations libraries are included (if animations are used)
- [ ] Animations are initialized properly
- [ ] Accessibility standards met
- [ ] Documentation complete

### Resources
- [Webflow University](mdc:https:/university.webflow.com)
- [BEM Naming Convention](mdc:http:/getbem.com/naming)
- [GSAP Documentation](mdc:https:/greensock.com/docs)
- [jsDelivr Documentation](mdc:https:/www.jsdelivr.com/documentation)
- [W3C HTML Validator](mdc:https:/validator.w3.org)
- [W3C CSS Validator](mdc:https:/jigsaw.w3.org/css-validator) 